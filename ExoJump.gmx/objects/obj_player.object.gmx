<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_002</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Intitiallizing variables
grav = 0.2;
hsp = 0;
vsp = 0;
jumpspeed = 14;
movespeed = 8;
slidespeed = 16;
slidedelaystart = 10;
slidedelay = 10;
slideremaining = 30;
slideduration = 30;
slideinterval = 30;
jumping = 0;
image_speed = 0.25;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player Input

hsp = movespeed;
jumping = 0;
//screen_touched = keyboard_check_pressed(vk_space);
screen_touched = device_mouse_check_button(0, mb_left);
//screen_not_touch = device_mouse_check_button_released(0, mb_left);


if (screen_touched)
{
    if (slidedelay &gt; 0)
    {
        slidedelay -= 1;
        hsp = movespeed;
        slideremaining = slideduration;
    }
    else
    {
        if (slideremaining &gt; 0)
        {
            slideremaining -= 1;
            if (place_meeting(x,y+1,obj_collision_box))
            {
                hsp = slidespeed;
            }
            else
            {
                hsp = movespeed
            }
        }
        else
        {
            slidedelay = slideinterval;
        }
    }
}
else
{
    if ((slidedelay&lt;slidedelaystart-2))
    {
        
        jumping = 1;
    }
    
    hsp = movespeed
    slidedelay = slidedelaystart;
    slideremaining = slideduration;
}




if (vsp &lt; 10) vsp += grav;

if (place_meeting(x,y+1,obj_collision_box))
{
    vsp = jumping * -jumpspeed;
    jumping = 0;
}

if (place_meeting(x+hsp,y,obj_collision_box))
{
    while(!place_meeting(x+sign(hsp),y,obj_collision_box))
    {
        x+=sign(hsp);
    }
    hsp = 0;
}

if (place_meeting(x,y+vsp,obj_collision_box))
{
    while(!place_meeting(x,y+sign(vsp),obj_collision_box))
    {
        y+=sign(vsp);
    }
    vsp = 0;
}

x += hsp;
y += vsp;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Restart room if player goes offscreen. (For testing purposes.)

if obj_player.x &gt; room_width + (sprite_width * 2)
{
    room_restart();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
